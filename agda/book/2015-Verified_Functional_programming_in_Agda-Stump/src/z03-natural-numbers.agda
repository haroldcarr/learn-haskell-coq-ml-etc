module z03-natural-numbers where

open import bool
open import bool-thms using (ùîπ-contra)
open import eq
open import level

-- p 50

data ‚Ñï : Set where
  zero :     ‚Ñï
  suc  : ‚Ñï ‚Üí ‚Ñï

-- p 51

{-# BUILTIN NATURAL ‚Ñï #-}

-------------------------
_+_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
zero  + n =          n
suc m + n = suc (m + n) -- recursive call on structurally smaller left side 'm' -- termination

-- p 53

-------------------------
0+ : ‚àÄ (x : ‚Ñï)
   ‚Üí 0 + x ‚â° x
0+ _ = refl -- via definitional equality

{- fails because _+_ defined in terms of pattern matching on left arg
+0 : ‚àÄ (x : ‚Ñï)
    ‚Üí x + 0 ‚â° x
+0 _ = refl

-- p 55

solution is for proof to call itself recursively:
-------------------------
-}
+0 : ‚àÄ (x : ‚Ñï)
   ‚Üí x + 0 ‚â° x

-- BASE
+0  zero                = refl -- via definitional equality

-- INDUCTIVE
-- note: name of 'y' variable, if renamed to 'x', is not same as 'x' in signature
+0 (suc y) rewrite +0 y = refl
{-    ^
      |
'x' in sig instantiated to 'suc y'

so trying to prove (the goal) : suc y + 0 ‚â° suc y

goal can be simplified by inductive case of def of _+_

so goal definitionally equal to : suc (y + 0) ‚â° suc y

       rewrite recursive call proves   y + 0  ‚â°     y

  type of proof is x + 0 ‚â° x
  so Agda with replace occurrences of x + 0 with x

                       leaving  : suc  y      ‚â° suc y

-- p 57

PROOF BY INDUCTION: recursive proofs

------------------------------------------------------------------------------
+ ASSOCIATIVITY

When theorem has multiple variables, must decide which one to use for induction.
Generally: var used where a recursive fun will patten match on it.
If several vars are pattern matched, prefer the one that is matched the most.

Since _+_ matches on 1st arg, then do induction here on 1st arg.
Here 'x' is matched twice but 'y' only once -- so use 'x'.
-}

-------------------------
+assoc : ‚àÄ (x y z : ‚Ñï)
       ‚Üí  x + (y  + z)
       ‚â° (x +  y) + z
{-
BASE case
  goal: zero + (y + z) ‚â° (zero + y) + z
  via def/eq
-}
+assoc  zero   y z                      = refl

{-
INDUCTIVE case
  goal          : suc (x + (y + z)) ‚â° suc ((x + y) + z)
  need proof of :     (x + (y + z)) ‚â°     ((x + y) + z)
    that is exactly the inductive hypotheses
    so use rewrite to recursively apply the proof
-}
+assoc (suc x) y z rewrite +assoc x y z = refl

------------------------------------------------------------------------------
-- p 60 + COMMUTATIVITY (rewrite with multiple equations)

-------------------------
+suc : ‚àÄ (x y : ‚Ñï) ‚Üí x + (suc y) ‚â° suc (x + y)
+suc  zero   y                  = refl
+suc (suc x) y rewrite +suc x y = refl

-------------------------
+comm : ‚àÄ (x y : ‚Ñï) ‚Üí x + y ‚â° y + x
{-
BASE
 Goal:         : y ‚â° (y + zero)
 so rewrite right hand side using +0 proof
 simplifies to : y ‚â°  y
-}
+comm  zero   y rewrite +0 y = refl
{-
INDUCTIVE
 Goal : suc (x + y) ‚â° (y + suc x)
-}
+comm (suc x) y rewrite +suc y x | +comm x y = refl

------------------------------------------------------------------------------
-- p 62 MULTIPLICATION

-------------------------
_*_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
zero  * n = zero
suc m * n = n + (m * n)

-------------------------
-- p 63 - right distributivity of * over +

-- variable counts x : 2; y : 1; z : 0 : so use x

*distribr : ‚àÄ (x y z : ‚Ñï)
          ‚Üí (x + y) * z ‚â° (x * z) + (y * z)

-- BASE
*distribr  zero   y z = refl

{-
INDUCTIVE
Goal:  ((suc x + y) * z)   ‚â° ((suc x * z)  + (y * z))
Goal: (z + ((x + y) * z)) ‚â° ((z + (x * z)) + (y * z))

*distribr (suc x) y z rewrite *distribr x y z = {!!}
Goal: (z + ((x * z) + (y * z))) ‚â° ((z + (x * z)) + (y * z))
      right-associated                left-associated
so reassociate: to prove
A + (B + C) ‚â° (A + B) + C
^    ^   ^
|    |   |
z    |   |
   x * z |
       y * z
-}
*distribr (suc x) y z
  rewrite
    *distribr x y z
  = +assoc z (x * z) (y * z)

------------------------------------------------------------------------------
-- p 65 * COMMUTATIVITY

-------------------------
*0 : ‚àÄ (x : ‚Ñï)
   ‚Üí x * 0 ‚â° 0

-- BASE
*0 zero = refl -- def/eq : (zero * 0) ‚â° 0
{-
INDUCTIVE
(suc x * 0) ‚â° 0
    (x * 0) ‚â° 0 -- IH
rewrite
         0  ‚â° 0
-}
*0 (suc y) rewrite *0 y = refl

-------------------------

*suc : ‚àÄ (x y : ‚Ñï) ‚Üí x * (suc y) ‚â° x + (x * y)
{-
BASE
         (zero * suc y) ‚â° (zero + (zero * y))
def/eq    zero          ‚â°  zero
-}
*suc zero y = refl
{-
INDUCTIVE
                (suc x *   suc y)   ‚â° (suc   x +   (suc x * y))
def/eq    suc  (y + (x *   suc y))  ‚â°  suc  (x + (y  + (x * y)))
rw *suc   suc  (y + (x  + (x * y))) ‚â°  suc  (x + (y  + (x * y)))
rw +assoc suc ((y +  x) + (x * y))  ‚â°  suc  (x + (y  + (x * y)))
rw +assoc suc ((y +  x) + (x * y))  ‚â°  suc ((x +  y) + (x * y))
rw +comm  suc ((x +  y) + (x * y))  ‚â°  suc ((x +  y) + (x * y))
-}
*suc (suc x) y
  rewrite
    *suc   x y
  | +assoc y x (x * y)
  | +assoc x y (x * y)
  | +comm  y x = refl

-------------------------

*comm : ‚àÄ (x y : ‚Ñï) ‚Üí x * y ‚â° y * x
{-
BASE
             (zero * y) ‚â° (y * zero)
def/eq        zero      ‚â° (y * zero)
rs *0         zero      ‚â°      zero
-}
*comm zero y rewrite *0 y = refl
{-
INDUCTIVE
           (suc x * y)  ‚â° (y *  suc x)
def/eq    (y + (x * y)) ‚â° (y *  suc x)
rw *suc   (y + (x * y)) ‚â° (y + (y * x))
rw *comm  (y + (y * x)) ‚â° (y + (y * x))
-}
*comm (suc x) y
  rewrite
    *suc  y x
  | *comm x y = refl

------------------------------------------------------------------------------
-- p 66 * ASSOCIATIVITY

*assoc : ‚àÄ (x y z : ‚Ñï) ‚Üí x * (y * z) ‚â° (x * y) * z
{-
BASE
        (zero * (y * z)) ‚â° ((zero * y) * z)
def/eq   zero            ‚â°   zero
-}
*assoc  zero   y z = refl
{-
INDUCTIVE

                      (suc x *  (y  * z))  ‚â°        ((suc x * y)  * z)
def/eq        ((y * z) +  (x *  (y  * z))) ‚â° ((y      +  (x * y)) * z)
rw *distribr  ((y * z) +  (x *  (y  * z))) ‚â° ((y * z) + ((x * y)  * z))
rw *assoc     ((y * z) + ((x *   y) * z))  ‚â° ((y * z) + ((x * y)  * z))
-}
*assoc (suc x) y z
  rewrite
    *distribr y (x * y) z
  | *assoc x y z = refl

------------------------------------------------------------------------------
-- p 67 LESS-THEN <

_<_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùîπ
0       <      0  = ff
0       < (suc y) = tt
(suc x) < (suc y) = x < y
(suc x) <      0  = ff

-------------------------
-- < is TRANSITIVE

{-
xx : ‚àÄ {x y z : ‚Ñï}
   ‚Üí x < y
   ‚Üí y < z
   ‚Üí x < z

Above will not type check because _<_ returns ùîπ VALUE, not a type
Types have type Set in Agda -- ùîπ is not the same as Set.
Could define _<_ as a relation: ‚Ñï ‚Üí ‚Ñï ‚Üí Set.
But then _<_ could not be used computationally.
Expressions with type Set describe code -- they are NOT code themselves
- e.g., cannot pattern-match on expressions of type Set
        cannot compute with them
Transitivity theorem is statement about behavior of the PROGRAM _<_.
-}

-- p 69

-------------------------
<-0 : ‚àÄ (x : ‚Ñï) ‚Üí x < 0 ‚â° ff
<-0      0  = refl --  (zero < 0) ‚â° ff; ff ‚â° ff
<-0 (suc y) = refl -- (suc y < 0) ‚â° ff; ff ‚â° ff

-------------------------
<-trans : ‚àÄ {x y z : ‚Ñï}
        ‚Üí x < y ‚â° tt
        ‚Üí y < z ‚â° tt
        ‚Üí x < z ‚â° tt
{-
       p1 : (x < zero) ‚â° tt    ; p2 : (zero < z) ‚â° tt      = Goal: (x < z) ‚â° tt
rw <-0 p1 : ff         ‚â° tt    ; p2 : (0    < z) ‚â° tt      = Goal: (x < z) ‚â° tt
-}
<-trans     {x}     {0}         p1 p2 rewrite <-0 x = ùîπ-contra p1

-- can't be called like this so no proof needed
<-trans     {0} {suc y}     {0} p1 ()

--     p1 : (zero < suc y) ‚â° tt ; p2 : (suc y < suc z) ‚â° tt = Goal: (zero < suc z) ‚â° tt
<-trans     {0} {suc y} {suc z} p1 p2 = refl

-- can't be called like this so no proof needed
<-trans {suc x} {suc y}     {0} p1 ()

--     p1 : (suc x < suc y) ‚â° tt; p2 : (suc y < suc z) ‚â° tt = Goal: (suc x < suc z) ‚â° tt
<-trans {suc x} {suc y} {suc z} p1 p2 = <-trans {x} {y} {z} p1 p2 -- uses IH via recursive call

------------------------------------------------------------------------------
-- p 71 EQUALITY TEST for ‚Ñï
{-
so far, rely on
- def/eq : done automatically during type checking
- ‚â°      : express, as a TYPE, a proposition that two VALUES are equal

there are other kinds of equality, e,g.,

COMPUTATIONAL EQUALITY : tests VALUE equality
-}

_=‚Ñï_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùîπ
0     =‚Ñï     0 = tt
suc x =‚Ñï suc y = x =‚Ñï y
_     =‚Ñï     _ = ff

_‚â§_  : ‚Ñï ‚Üí ‚Ñï ‚Üí ùîπ
x ‚â§ y = (x < y) || x =‚Ñï y

-------------------------

=‚Ñï-refl : ‚àÄ (x : ‚Ñï) ‚Üí (x =‚Ñï x) ‚â° tt
=‚Ñï-refl 0 = refl
=‚Ñï-refl (suc x) = (=‚Ñï-refl x)

-------------------------

-- SOUNDNESS property: things indicated to be true really are true
=‚Ñï-to-‚â° : ‚àÄ {x y : ‚Ñï} ‚Üí x =‚Ñï y ‚â° tt ‚Üí x ‚â° y
=‚Ñï-to-‚â°     {0}     {0} _ = refl
=‚Ñï-to-‚â° {suc x}     {0} ()
=‚Ñï-to-‚â°     {0} {suc y} ()
=‚Ñï-to-‚â° {suc x} {suc y} p
  rewrite
    =‚Ñï-to-‚â° {x} {y} p = refl

-------------------------

=‚Ñï-from-‚â° : ‚àÄ {x y : ‚Ñï}
          ‚Üí x ‚â° y
          ‚Üí x =‚Ñï y ‚â° tt
=‚Ñï-from-‚â° {x} refl = =‚Ñï-refl x

------------------------------------------------------------------------------
-- p 73 EXERCISES

-- 1 nat-thms

--------------------------------------------------
-- properties of addition
--------------------------------------------------

+1 : ‚àÄ (x : ‚Ñï) ‚Üí x + 1 ‚â° suc x
+1 zero = refl
+1 (suc n) rewrite +1 n = refl

+perm : ‚àÄ (x y z : ‚Ñï) ‚Üí x + (y + z) ‚â° y + (x + z)
+perm zero y z = refl
+perm (suc x) y z -- (suc  x + (y + z)) ‚â° (y + (suc  x + z))
                  --  suc (x + (y + z)) ‚â° (y +  suc (x + z))
  rewrite
    +suc y (x + z) -- suc (x + (y + z)) ‚â° suc (y + (x + z))
  | +assoc x y z   -- suc ((x + y) + z) ‚â° suc (y + (x + z))
  | +comm x y      -- suc ((y + x) + z) ‚â° suc (y + (x + z))
  | +assoc y x z   -- suc ((y + x) + z) ‚â° suc ((y + x) + z)
  = refl

--------------------------------------------------
-- properties of multiplication
--------------------------------------------------

*1 : ‚àÄ {n : ‚Ñï} ‚Üí n * 1 ‚â° n
*1 {zero} = refl
*1 {suc n}    -- (suc n * 1) ‚â° suc n
              -- suc (n * 1) ‚â° suc n
  rewrite
    *comm n 1 -- suc (n + 0) ‚â° suc n
  | +0 n      -- suc  n      ‚â° suc n
  = refl

--------------------------------------------------
-- properties of <, ‚â§, and =‚Ñï, iszero
--------------------------------------------------

0-‚â§ : ‚àÄ (x : ‚Ñï) ‚Üí 0 ‚â§ x ‚â° tt
0-‚â§ zero = refl
0-‚â§ (suc n)      -- (0 ‚â§ suc n) ‚â° tt
  rewrite 0-‚â§ n  --          tt ‚â° tt
  = refl

=‚Ñï-sym : ‚àÄ (x y : ‚Ñï) ‚Üí (x =‚Ñï y) ‚â° (y =‚Ñï x)
=‚Ñï-sym zero zero  = refl
=‚Ñï-sym (suc x) zero = refl -- (suc x =‚Ñï zero) ‚â° (zero =‚Ñï suc x);  ff ‚â° ff
=‚Ñï-sym zero (suc y) = refl -- (zero =‚Ñï suc y) ‚â° (suc y =‚Ñï zero);  ff ‚â° ff
=‚Ñï-sym (suc x) (suc y) rewrite =‚Ñï-sym x y = refl

=‚Ñï-suc : ‚àÄ (x : ‚Ñï) ‚Üí suc x =‚Ñï x ‚â° ff
=‚Ñï-suc zero = refl
=‚Ñï-suc (suc n) rewrite =‚Ñï-suc n = refl

<-suc : ‚àÄ (n : ‚Ñï) ‚Üí n < suc n ‚â° tt
<-suc zero = refl
<-suc (suc n) rewrite <-suc n = refl

-- TODO: understand
suc-inj : ‚àÄ {n m : ‚Ñï} ‚Üí suc n ‚â° suc m ‚Üí n ‚â° m
suc-inj         {0}  {0} _ = refl
suc-inj {m = suc m} refl   = refl

<=‚Ñïff : ‚àÄ (x : ‚Ñï) ‚Üí 0 < x ‚â° tt ‚Üí x =‚Ñï 0 ‚â° ff
<=‚Ñïff (suc x) _ = refl

<‚â§ : ‚àÄ {n m : ‚Ñï} ‚Üí n < m ‚â° tt ‚Üí n ‚â§ m ‚â° tt
<‚â§     {0}     {0} _ = refl
<‚â§ {suc _}     {0} ()
<‚â§     {0} {suc _} _ = refl
<‚â§ {suc n} {suc m} p rewrite <‚â§ {n} {m} p = refl

--------------------------------------------------
-- ordering properties of < and ‚â§‚Ñï
--------------------------------------------------

<-irrefl : ‚àÄ (n : ‚Ñï) ‚Üí n < n ‚â° ff
<-irrefl zero = refl
<-irrefl (suc n) rewrite <-irrefl n = refl

<-asym : ‚àÄ {x y : ‚Ñï}
       ‚Üí x < y ‚â° tt
       ‚Üí y < x ‚â° ff
<-asym {0}         {0} _ = refl
<-asym {0}     {suc _} _ = refl
<-asym {suc _}     {0}     ()
<-asym {suc x} {suc y} p = <-asym {x} {y} p

‚Ñï-trichotomyùîπ : ‚àÄ (n m : ‚Ñï) ‚Üí n < m || n =‚Ñï m || m < n ‚â° tt
‚Ñï-trichotomyùîπ      0       0  = refl
‚Ñï-trichotomyùîπ      0  (suc m) = refl
‚Ñï-trichotomyùîπ (suc n)      0  = refl
‚Ñï-trichotomyùîπ (suc n) (suc m) = ‚Ñï-trichotomyùîπ n m

<‚â§-trans : ‚àÄ {x y z : ‚Ñï}
         ‚Üí x < y ‚â° tt
         ‚Üí y ‚â§ z ‚â° tt
         ‚Üí x < z ‚â° tt
<‚â§-trans     {x}     {0}         p1 _  rewrite <-0 x = ùîπ-contra p1
<‚â§-trans     {0} {suc y}     {0} _  ()
<‚â§-trans     {0} {suc y} {suc z} _  _  = refl
<‚â§-trans {suc x} {suc y}     {0} _  ()
<‚â§-trans {suc x} {suc y} {suc z} p1 p2 = <‚â§-trans {x} {y} {z} p1 p2

‚â§-refl : ‚àÄ (x : ‚Ñï) ‚Üí x ‚â§ x ‚â° tt
‚â§-refl zero = refl
‚â§-refl (suc x) rewrite ‚â§-refl x = refl

--------------------------------------------------
-- injectivity properties of addition
--------------------------------------------------

+inj1 : ‚àÄ {x y z : ‚Ñï}
      ‚Üí x + y ‚â° x + z
      ‚Üí     y ‚â°     z
+inj1 {0} {y} {z} p = p
+inj1 {suc x} {y} {z} p = +inj1 {x} {y} {z} (suc-inj p)

+inj2 : ‚àÄ {x y z : ‚Ñï}
      ‚Üí x + z ‚â° y + z
      ‚Üí x     ‚â° y
+inj2 {x} {y} {z} p        -- p : (x + z) ‚â° (y + z); Goal: x ‚â° y
  rewrite
    +comm x z              -- p : (z + x) ‚â° (y + z); Goal: x ‚â° y
  | +comm y z              -- p : (z + x) ‚â° (z + y); Goal: x ‚â° y
  = +inj1 {z} {x} {y} p    -- NOTE: '+inj1'

------------------------------------------------------------------------------

-- 2

{- TODO
nat.agda

>, >= : defined in terms of < and <=

Prove versions of theorems like <-trans and <+
- modified to use _>_ instead of _<_

for practice writing out formulas in Agda
since the proofs can be written just to invoke the theorems dealing with _<_
-}

_>_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùîπ
a > b = b < a

_‚â•_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ùîπ
a ‚â• b = b ‚â§ a

<-trans2 : ‚àÄ {x y z : ‚Ñï}
         ‚Üí y > x ‚â° tt
         ‚Üí z > y ‚â° tt
         ‚Üí z > x ‚â° tt
<-trans2 {x} {y} {z} = <-trans {x} {y} {z}

------------------------------------------------------------------------------

-- 3a

f : (n : ‚Ñï) ‚Üí ‚Ñï
f      0  = 1
f (suc x) = (suc x) * (f x)

f-is-factorial : f 5 ‚â° 120
f-is-factorial = refl

-- 3b

f' : ‚Ñï ‚Üí ùîπ
fb : ‚Ñï ‚Üí ùîπ

-- is-odd
f'      0  = ff
f' (suc x) = fb x

-- is-even
fb      0  = tt
fb (suc x) = f' x

f'-is-odd : f' (suc 0) ‚â° tt
f'-is-odd = refl

fb-is-even : fb (suc (suc 0)) ‚â° tt
fb-is-even = refl
