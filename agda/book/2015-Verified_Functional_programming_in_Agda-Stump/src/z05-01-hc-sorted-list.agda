{-# OPTIONS --allow-unsolved-metas #-}

open import bool
open import bool-thms2
open import eq
open import maybe
open import product
open import product-thms
open import bool-relations using (transitive ; total)

module z05-01-hc-sorted-list
  (A : Set)                    -- type of elements
  (_‚â§A_ : A ‚Üí A ‚Üí ùîπ)           -- ordering function
  (‚â§A-trans : transitive _‚â§A_) -- proof of transitivity of given ordering
  (‚â§A-total : total      _‚â§A_) -- proof of totality     of given ordering
  where

open import bool-relations _‚â§A_ hiding (transitive ; total)
open import minmax _‚â§A_ ‚â§A-trans ‚â§A-total

data slist : A ‚Üí A ‚Üí Set where
  snil  : ‚àÄ {l u : A}
        ‚Üí l ‚â§A u ‚â° tt
        ‚Üí slist l u
  scons : ‚àÄ {l u : A}
        ‚Üí (d : A)      -- value stored at head
        ‚Üí slist l u    -- elements to the right ‚â• stored value
        ‚Üí d ‚â§A l ‚â° tt
        ‚Üí slist (min d l) (max d u)

slist-insert : ‚àÄ {l u : A}
             ‚Üí (d : A)                   -- insert 'd'
             ‚Üí slist l u                 -- into this 'bst'
             ‚Üí d ‚â§A l ‚â° tt
             ‚Üí slist (min d l) (max d u) -- type might change
slist-insert d (snil l‚â§Au) d‚â§Al‚â°tt = scons d (snil l‚â§Au) d‚â§Al‚â°tt

slist-insert d   (scons d' xs d'‚â§Al‚â°tt) d‚â§Al‚â°tt  with keep (d ‚â§A d')

slist-insert d L@(scons d' xs d'‚â§Al‚â°tt) d‚â§Al‚â°tt | tt , p = scons d L d‚â§Al‚â°tt

slist-insert d L@(scons d' xs d'‚â§Al‚â°tt) d‚â§Al‚â°tt | ff , p = {!!}
