open import bool
open import eq using (_‚â°_)
open import nat
open import nat-thms
open import z05-01-hc-slist2-base

module z05-01-hc-slist2-test where

data _R‚â§_ : ‚Ñï ‚Üí ‚Ñï ‚Üí Set where

  z‚â§n : ‚àÄ {n : ‚Ñï}
      --------
    ‚Üí zero R‚â§ n

  s‚â§s : ‚àÄ {m n : ‚Ñï}
    ‚Üí     m R‚â§     n
      -------------
    ‚Üí suc m R‚â§ suc n

‚â§-pred : ‚àÄ {m n} ‚Üí suc m R‚â§ suc n ‚Üí m R‚â§ n
‚â§-pred (s‚â§s m‚â§n) = m‚â§n

_‚â§?_ : Decidable _R‚â§_
zero  ‚â§? _     = left z‚â§n
suc m ‚â§? zero  = right Œª()
suc m ‚â§? suc n with m ‚â§? n
... | left  m‚â§n = left  (s‚â§s m‚â§n)
... | right m‚â∞n = right Œª x ‚Üí m‚â∞n (‚â§-pred x)

‚Ñï-Equivalence : Equivalence {X = ‚Ñï} _‚â°_
‚Ñï-Equivalence = record
  { refl  = _‚â°_.refl
  ; sym   = Œª x‚â°y ‚Üí eq.sym x‚â°y
  ; trans = Œª {_‚â°_.refl _‚â°_.refl ‚Üí eq.trans _‚â°_.refl _‚â°_.refl} }

xR‚â§y‚Üíx‚â§y‚â°tt : ‚àÄ {x y : ‚Ñï} ‚Üí x R‚â§ y ‚Üí x ‚â§ y ‚â° bool.ùîπ.tt
xR‚â§y‚Üíx‚â§y‚â°tt {x} {y}  z‚â§n       = 0-‚â§ y
xR‚â§y‚Üíx‚â§y‚â°tt {x} {y} (s‚â§s xR‚â§y) = xR‚â§y‚Üíx‚â§y‚â°tt xR‚â§y

x‚â§y‚â°tt‚ÜíxR‚â§y : ‚àÄ {x y : ‚Ñï} ‚Üí x ‚â§ y ‚â° bool.ùîπ.tt ‚Üí x R‚â§ y
x‚â§y‚â°tt‚ÜíxR‚â§y  {zero} {_}         _ = z‚â§n
x‚â§y‚â°tt‚ÜíxR‚â§y {suc x} {y} sucx‚â§y‚â°tt = {!!} -- TODO

R‚â§-total : (x y : ‚Ñï) ‚Üí Either (x R‚â§ y) (y R‚â§ x)
R‚â§-total zero     zero   = left z‚â§n
R‚â§-total zero    (suc y) = left z‚â§n
R‚â§-total (suc x)  zero   = right z‚â§n
R‚â§-total (suc x) (suc y) with R‚â§-total x y
... | left  l = left  (s‚â§s l)
... | right r = right (s‚â§s r)

x‚â°y‚ÜíxR‚â§y : ‚àÄ {x y : ‚Ñï} ‚Üí x ‚â° y ‚Üí x R‚â§ y
x‚â°y‚ÜíxR‚â§y  {zero}        {_}        _ = z‚â§n
x‚â°y‚ÜíxR‚â§y {suc x} {.(suc x)} _‚â°_.refl = s‚â§s (x‚â§y‚â°tt‚ÜíxR‚â§y (‚â§-refl x))

‚Ñï-TotalOrder : TotalOrder {X = ‚Ñï} _‚â°_ _R‚â§_
‚Ñï-TotalOrder = record
  { antisym     = Œª x‚â§y y‚â§x ‚Üí ‚â§-antisym (xR‚â§y‚Üíx‚â§y‚â°tt x‚â§y) (xR‚â§y‚Üíx‚â§y‚â°tt y‚â§x)
  ; trans       = Œª {x} {y} {z} xR‚â§y yR‚â§z ‚Üí
                    x‚â§y‚â°tt‚ÜíxR‚â§y (‚â§-trans {x} {y} {z} (xR‚â§y‚Üíx‚â§y‚â°tt xR‚â§y) (xR‚â§y‚Üíx‚â§y‚â°tt yR‚â§z))
  ; total       = R‚â§-total
  ; reflexive   = x‚â°y‚ÜíxR‚â§y
  ; equivalence = ‚Ñï-Equivalence
  }

import z05-01-hc-slist2-list as SL
open   SL {‚Ñï}
          {_‚â°_}
          {_R‚â§_}
          _‚â§?_
          ‚Ñï-TotalOrder

empty : OList ‚ü¶ 0 ‚üß ‚ü¶ 9 ‚üß
empty = nil (‚â§-lift z‚â§n)

l-9 : OList ‚ü¶ 0 ‚üß ‚ü¶ 9 ‚üß
l-9 = insert 9 empty (‚â§-lift z‚â§n) (‚â§-lift (s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s z‚â§n))))))))))

l-5-9 : OList ‚ü¶ 0 ‚üß ‚ü¶ 9 ‚üß
l-5-9 = insert 5 l-9 (‚â§-lift z‚â§n) (‚â§-lift (s‚â§s (s‚â§s (s‚â§s (s‚â§s (s‚â§s z‚â§n))))))

l-1-5-9 : OList ‚ü¶ 0 ‚üß ‚ü¶ 9 ‚üß
l-1-5-9 = insert 1 l-5-9 (‚â§-lift z‚â§n) (‚â§-lift (s‚â§s z‚â§n))

l-1-5-9' : OList ‚ä• ‚ä§
l-1-5-9' = isort' (9 ‚à∑ 1 ‚à∑ 5 ‚à∑ [])

-- cannot do because lower/upper indices different : l-1-5-9 ‚â° l-1-5-9'
_ : toList l-1-5-9 ‚â° toList l-1-5-9'
_ = eq.refl
