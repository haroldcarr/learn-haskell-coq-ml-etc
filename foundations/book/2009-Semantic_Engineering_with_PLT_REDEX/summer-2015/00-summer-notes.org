Created       : 2015 Jul 27 (Mon) 07:34:11 by Harold Carr.
Last Modified : 2015 Jul 30 (Thu) 12:10:00 by Harold Carr.

http://redex.racket-lang.org/

Course material:
- [[http://ccs.neu.edu/home/matthias/redex-workshop]]
- [[https://dvanhorn.github.io/redex-aam-tutorial/tutorial.rkt]]

Solutions:
- [[http://ccs.neu.edu/home/matthias/redex-workshop/lab-mon-aft.rkt]]
- [[http://ccs.neu.edu/home/matthias/redex-workshop/lab-tue-mor.rkt]]

Programming Languages and Lambda Calculi - Matthias Felleisen:
- [[http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.193.6272&rep=rep1&type=pdf]]
- [[https://www.cs.utah.edu/~mflatt/past-courses/cs7520/public_html/s06/notes.pdf]]

Paul : GUIX (NixOs configed by Scheme)

Nothing
T = intersection_x:void Void

about 45 students
4 women (3 of them from asia)
1 afro-american man

------------------------------------------------------------------------------

MONDAY MORNING:

λ = `^

((λx.x) (λx.x))
- this is NOT text: think TREES

vars : what matters is their binding
- =α : set of all lambda exprs that are equivalent (var renaming)

substitution (binding)
- (λx.e) e = e[x<-e']
- but are the args well-defined? (are the functions partial?)

β axiom
- notion of reduction
- compatible closure of ??
- if e β e' then e =β e'

REducible EXpression

syntaic compatiblity closure
- if e β e' then e0 e =β e0 e' (shift right)
- if e β e' then e e0 =β e' e0 (shift left)

reflexive, symmetric, transitive are algebraic functions that can be applied to relations

system of calculating equivalences between terms

does it have meaning?
- can I equate 'true' and 'false' - if so then inconsistent
  - prove you can't prove the equivalence of ANY two terms
  - church-rosser (consistency theorem)
- is there a topological generated spae of functions that assigned
  meaning to terms and satisfies equations?

1958

- λ Calculus and Denotational Semantic had BAD influence on CS
- LISP introduced λ notation and got it wrong
- Algol60 supposed to based on substitution model of lambda calculus (call-by-name)
  - supposed to be β rule of λ calculus
    - but slow
  - so introduced call-by-value (fast, but did not understand it)

Landin (B"ohm, McCarthy) wrote how to interpret Algo60 in λ calculus

Can't define "applicative order evaluation"
- but was popularized: Abelson/Sussman book
- to do it, defined reduction equations - has not been done

Denotational semantics took us off track.
- looking for topologies was waste of time

1972

Plotkin published "Call-by-name, call-by-value and the λ calculus"
- algorithm to understand calculus and semantic for programming language
- connected CBN/CBV (CPS)
Plotkin's 8-step program:
1. pick a term language, scoped : e.g., e = x | λx.e | e e
2. pick a subset of terms called programs and another called values
   - programs are closed terms (no free variables)
   - values are λ exprs or other constants (e.g., numbers ) of language
3. define a notion of reduction
   - basic relation that relates terms
   - Plotkin picked β and βᵥ : (λx,e)v βᵥ e[x <- v]
4. uniformly create a calculus (̄=ₓ) fro the notions of reduction (xₓ)
   - a way of equating arbitary program FRAGMENTS
5. define a semantics from  xₓ
   - evalₓ : Program x Value
   - e evalₓ v iff e xₓ v
   - a way of relating COMPLETE programs to values
6. prove evalₓ is a function
   - church-rosser lemma is central
   - evalₓ is a (partial) function
   - the reason a λ expr prints like #closure is because it will evaluate to DIFFERENT things
     (therefore not a function) depending on compiler optimizations
(Y operator is good for humans, not for the machine)
7. prove =ₓ satisfies a "standardization" property
   - if e =ₓ e' then can be done in algorithmic fashion
   - how to pick next REDEX
   - pick leftmost/outermost REDEX (unless skipped before)
   - standard reduction relation : |->ₓ
     - (instead of search the space and pick one you like)
   - evalₓ (e) = v iff e ->ₓ v
   - this eval is same as Landin used for CBV
   - now have calculation system that enables reasoning about programs
   - evalₓ based on standard reduction (partial programs)
   - eval=ₓ based on ?? (calculations on programs)
(book by Halmos : how to write mathematics - make sure paper can be read out loud)
(curry and fess theorem)
8. prove evalₓ = eval=ₓ
   - consistent with "fast" interpretation
   - Morris '68 : programming language based on typed polymorphic λ calculus
   - OBSERVATIONAL EQUIVALENCE
     - for all ways of placing a term into a complete program : a CONTEXT
     - a program with a HOLE where an expression goes C[e] viz C[e']
   - prove evalₓ (C[e]) = evalₓ (C[e'])
     - EXTENTIONAL: cannot tell from TERMINATION value the difference between the two
     - (INTENTIONAL does not matter, e.g., insert versus quick sort)
   - =~ and =ᵥ
   - proof system consistent with "the truth"

This week: using these 8 points to create models of languages and build interpreters.

CBV and CBN are NOT related otherwise than in syntax of the terms.

Laziness is a very complicated reductio.

1985 : Mattheis

(f (call/cc g)) ~ g(f)  WRONG
- call/cc : imperative way controlling execution

Evaluation Context Semantics (much shorter than inferene rules)
- 1st INSIGHT: USE CONTEXTS INSTEAD OF INFERENCE RULES (e.g., e β e' => e =β e)
- true for syntactic compatibility and notion of leftmost/outermost

CONTEXTS
- a program with a ONE HOLE where you can put an expression

e = x    | λx.e | e e
    HOLE | λx.E | C e | e C

generate terms with ONE hole

What can you put in the hole? (filling in a context).
C[e] "textually" put e into hole

Rather than inference rules:
  =β : e =β e' iff [∃c . e = C[(λx.e₀)E₁] AND e' = C[e₀[x<-E₁]]

Evaluation Context (write single eval step using contexts)

CBN: E = HOLE | (E e)
     E[(λx.e)e')] is the LMOM redex

     E[(λx.e)e'] ->name E[e[x<-e']]

CBV : E = HOLE | (v E) | (E e)  : left to right
      or  HOLE | (e E) | (E v)  : right to left

     E[(λx.e)v] ->value E[e[x<-v]]

2nd INSIGHT : you can use evaluation context in statement of reduction
- useful for non-local flow-of-control (exceptions, continuations, ...)

  E[cloud v] where cloud can manipulate E

System with Exceptions

SYNTAX:      e = x | λx.e | ee | raise e

CALCUATION:  C[(λx.e)v]    =ₓ C[e[x<-x]]
             C[E[raise e]] =ₓ C[raise e]

REDUCTION:   E[(λx.e)v]     ->ₓ E[e[x<-x]]
             E[E'[raise e]] ->ₓ E[raise e] ->ₓ raise e

System with Assignments

SYNTAX:      e = x | λx.e | ee | x := e aka (set! x e) | (letrec ((x v) ...) e)

EVALUATION CONTEXTS:
             v = λx.e
             E = HOLE | (E e) | (v e) | (set! x E)

CALCULUS:
βset!  : (λ.x)v R (letrec ((x v)) e)
(x)    : (letrec ((...(x v) ...)) E[x]) R (letrec ((.. (x v) ...) E[v]])
(set!) : (letrec ((...(x v) ...))E[set! x .....

(scope extrusion) : ... you can lift letrecs out

(merge) : letrec immediately inside letrec

all above is for SINGLE-THREADED

but can do reductions in parallel

3rd INSIGHT : derive register machines from standard

Separate E from the expr where the "machine" is looking for redex

control register : e
stack   register : E

change data represetation from context to stack (real stack)

while we search for next redex do next substitution  : make substitution lazy
yields a explicit environment

control + env (value of free vars) + control stack : CEK machine

THIS TAKES TO PAGE 173.  Part 1 without chapter 10.

------------------------------------------------------------------------------
MONDAY AFTERNOON

Part 2: pieces of chapters 11-15 (except for Chapter 18)

- [[http://ccs.neu.edu/home/matthias/redex-workshop/lab-mon-aft.rkt]]

------------------------------------------------------------------------------

TUESDAY MORNING:

Online notes are for call-by-name.

Lecture is call-by-value.

1 =β is equational logic

2 but reduction system introduces notion of reduction:
- relation 'x' on terms without any properties.
- ->ₓ syntatic compatibility closure (one step reduction)
- ->>ₓ transtive closure (sometimes reflexive)
- =ₓ equavelance closure

prove metatheorem : 1 equational logic and 2 reduction system are equivalent

can add 3 term theory and 4 model theory

TODAY: requires values and contexts

How do you develop a reduction relation?
- work through examples first.

normal form : no redex

semantics : function to final value (if closure you can't see inside)

PL researchers have to evaluate model against reality (the "real" language)

language/("dinosaur")   <-–e–->  model
                     \         /
                      v       v
                     V_d  =? V_m

==============================================================================
TUESDAY AFTERNOON:

Milner : "typed program can't go wrong"

Matthias : he lied (he did not deal with partial functions)

types are more expressive than contracts

simply-typed λ-calculus

classify is a model of runtime
model exist to predict what will happen
predict if program will get (un)stuck
predict what expressions will yield at runtime
two kinds of type systems
- bad (sometimes correct)
  - c++
- good (milner)
  - ML (up to well-known list of exceptions)
    - rules out certain classes of errors

Γ |- e : t
Γ is environment

SPECIFICATION of STLC:

———– where Γ(x) = t
 Γ |- x : t

Γ |- n : int

Γ |- + : int -> (int -> int)

Γ[x<t} |- e :s
—————————————
Γ |- (λx:t.e) : t -> s

Γ |- e₁ : t -> s   Γ |- e₂ : t
—————————————————————————
Γ |- (e₁ e₂) : s

See REDEX documentation for more details.

------------------------------------------------------------------------------
WEDNESDAY MORNING

calculus is way to do equational reasoning about program fragments (inculding whole programs)
- for you and compiler to reason

semantics is function from whole program (no free vars) to value
- for runtime system to get results

variable assignment statements (vars as locations)
- add store to reduction relation
- the store is a LETREC then the rest evolves and letrecs can merge

raise-exception (erase evaluation contexts)

YESTERDAY: η-reduction shows call-by-name λ-calculus has problems
- η says everything is a function (ala Church)
- doesn't work for real programming languages
- λx,(e x) = e, but e might diverge (e must be hygenic)
- λx,(v x) = v, because divergence happens before you get here, or might be a number
  - only works if you KNOW that 'v' is a function of one argument

==============================================================================
WEDNESDAY AFTERNOON

instead of standard reduction, now 3-register machine

CC : Control String + Context

------------------------------------------------------------------------------

CK : Control String + stacK (aka "Continuation") - left is top

CK:
((app [v1...vn] [e1...en])
 (app [w1...wn] [f1...fn])
 (app [u1...un] [g1...gn])
 ...
)
equivalent to CC:
(g ... (f ... (e ... [] v...) w ...) u ...)

------------------------------------------------------------------------------

CEK : delay (lazy) substitution via environment

ρ : 'rho' : enviRonmnet (value of variables)
c :

What he showed in these 3 days was his dissertation.

------------------------------------------------------------------------------

THURSDAY MORNING - DAVID VAN HORN

program analysis : predicting the behavior of programs ("without running it")
- predict :doesn't crash
- they are actually "run" in a way that makes the analysis computable
  - abstract interpretation
  - contrainsts, type inference

take things we know about interpreters and apply to abstract interpretation

environments are a way of optimizaing substitution

EVAL : decomposing term to find redex
CONTINUE : plug something into context
APPLY : apply reduction axiom

don't use imperative features if you need to write mathematical proofs

abstract interpretation can tell you if you have a runtime type error

abstract interpretation : program operation represented as finite grpph


