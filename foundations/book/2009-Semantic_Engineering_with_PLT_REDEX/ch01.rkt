;;
;; Created       : 2015 Jan 02 (Fri) 16:15:07 by Harold Carr.
;; Last Modified : 2015 Jul 18 (Sat) 19:18:27 by Harold Carr.
;;

;;; p 5 1.1 Defining Sets

;; p 6
SET B:
-         t in B [a]
-         f in B [b]
- (B1 v B2) in B [c]

;; p 7 Exercise 1.1 (also see version in ch11.rkt)

1:  t                     valid via [a]
2:  v                   invalid

3:  ((f v t) v (f v f))
 w:       t               valid via [a]
 x:   f                   valid via [b]
 y:  (f v t)              valid via [c]
 z:            (f v f)    valid via [c]
    ((f v t) v (f v f))   valid via y, z and [c]

4:  ((f) v (t))         invalid
5:  "hello"             invalid

;;; p 7 1.2 Relations
RELATION r (neither reflexive, symmetric nor transitive):
SINGLE-STEP REDUCTION : maps expr to single reduced expr.
Asymmetric so reduction proceeds towards value.
- (f v B1) r B1 [a]
- (t v B1) r t  [b]

the left side can only be a terminal:
(f v ...
(t v ...

RELATION vr (reflexive closure of r):
UNINTERESTING
- (f v B1) vr B1      [a]
- (t v B1) vr t       [b]
-      B1  vr B1      [c] : recognizes complex left ((t v f) v f) but does not reduce it
also expressed as:
- B1 vr B2 if B1 r B2 [ab]
- B1 vr B1            [c]

RELATION ~r (symmetric-transitive closure of vr):
(reflexive-symmetric-transitive or equivalence closure of r):
In general, does not show of to reduce B to t or f.
UNINTERESTING
- B1 ~r B2 if B1 r B2               [ab]
- B1 ~r B1                          [c] : reflexive  (no reduction)
- B2 ~r B1 if B1 ~r B2              [d] : symmetric  (no reduction)
- B1 ~r B3 if B1 ~r B2 and B2 ~r B3 [e] : transitive (no reduction)

;;; p 8 1.3 Semantics as an Equivalence Relation

;;; p 9 1.4 Semantics via Reduction
RELATION ~>>r (reflexive-transitive closure of r):
MULTI-STEP REDUCTION: maps an expr to many other exprs but at most one of t or f
Asymmetric so reduction proceeds towards value.
UNINTERESTING
- B1 ~>>r B1                              [a] : reflexive  (no reduction)
- B1 ~>>r B2 if B1 r B2                   [b]
- B1 ~>>r B2 if B1 ~>>r B3 and B3 ~>>r B2 [c] : transitive (no reduction)

;;; p 10 Exercise 1.2
Show
(f v (f v (f v f))) ~>>r                f via r one-step

(f v (f v (f v f))) -[r/a]->  (f v (f v f))
                    -[r/a]->       (f v f)
                    -[r/a]->            f

;;; p 10 1.5 Reduction in Context

Above relations can't handle ((f v t) v f) because r can't recognize compound left expr.

Extend r to support reduction of sub-expressions.
RELATION ->r (compatible closure of r):
SINGLE-STEP
INTERESTING : corresponds to evaluation and interpretation
-       B1  ->r B2          if B1 r   B2  [a] : simple  left  reduction
- (B1 v B2) ->r (B1' v B2)  if B1 ->r B1' [b] : complex left  reduction
- (B1 v B2) ->r (B1  v B2') if B2 ->r B2' [c] : complex right reduction (given 'r', is this needed?)

TODO: CHECK
RELATION ->>r (reflexive-transitive closureof ->r):
Natural reduction relation generated by r
INTERESTING : corresponds to evaluation and interpretation
- B1 ->>r B1                              [a]
- B1 ->>r B2 if B1 -> B2                  [b]
- B1 ->>r B2 if B1 ->>r B3 and B3 ->>r B2 [c]

TODO: DEFINE
RELATION =r (of ->r):
INTERESTING : relates expressions that produce the same result
- B1 =r B2 if B1 -> B and B2 -> B

;;; p 11 Exercise 1.3
show
(f v ((t v f) v f)) ~>>r t

     ((t v f) v f)  r    t            [r/a]
but now no r nor ~>>r rule applies

;;; p 11 Exercise 1.4
show
(f v ((t v f) v f)) ->>r   t
using reduction based on ->r

reduce
                   [r/a]
     ((t v f) v f) [->r/b]
     ( t      v f) [r/b]
       t

expand
      (t v f)       r     t       [r/b]
     ((t v f) v f)  ->r   t       [->r/b]
(f v ((t v f) v f)) r     t       [r/a]

;;; p 11 1.6 Evaluation Functions

Evaluator should return t or f - anything else is irrelevant.

R(esult) = t | f

a function:
eval_r^->> = f if B ->> f
             t if B ->> t

can replace ->> with =r above for another evaluator

;; p 12 Exercise 1.5

r
 : a function
 (t v f) r t
 (t v t) r t

vr (reflexive closure of r)
 : not a function
 (t v f) r2 t
 (t v f) r2 (t v f)

~r (equivalence closure of r)
 : not a function (ditto)
 (t v f) ~r f
 (t v f) ~r (t v f)

~>r (reflexive-transitive closure of r)
 : not a function (ditto)

->r (compatible closure of r)
 : a function (ditto)

->>r (reduction relation generated by r)
 : a function

=r (compatible, reflexive, transitive, symmetric closure of r)
 : not a function

;; p 12 Exercise 1.6

show results of
 eval_r^=r  ((f v t) v t)  [->r/b]
            (     t  v t)  [r/b]
                  t
show results of
 eval_r^->> ((f v t) v t)  ditto

;;; p 12 1.7 Notation Summary

name def                                            intuition
_       the base relation                           single reduction step with no context
->_     compatible closure of _                     single step within a context
->>_    reflexive-transitive closure of ->_         zero or more evaluation steps
=_      symmetric-transitive closure of ->>_        equates exprs that produce same result
eval_-  a relation projected to a range (results)   complete evaluation based on ->>_ or =_

;; End of file.
